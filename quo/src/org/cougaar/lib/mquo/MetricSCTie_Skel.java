// Skeleton class generated by rmic, do not edit.
// Contents subject to change without notice.

package org.cougaar.lib.mquo;

public final class MetricSCTie_Skel
    implements java.rmi.server.Skeleton
{
    private static final java.rmi.server.Operation[] operations = {
	new java.rmi.server.Operation("boolean booleanValue()"),
	new java.rmi.server.Operation("char charValue()"),
	new java.rmi.server.Operation("double doubleValue()"),
	new java.rmi.server.Operation("float floatValue()"),
	new java.rmi.server.Operation("void init(org.cougaar.core.qos.metrics.MetricsService)"),
	new java.rmi.server.Operation("boolean isReady()"),
	new java.rmi.server.Operation("int longValue()"),
	new java.rmi.server.Operation("long longlongValue()"),
	new java.rmi.server.Operation("void newPath(java.lang.String)"),
	new java.rmi.server.Operation("byte octetValue()"),
	new java.rmi.server.Operation("short shortValue()"),
	new java.rmi.server.Operation("java.lang.String stringValue()")
    };
    
    private static final long interfaceHash = -926429695856777445L;
    
    public java.rmi.server.Operation[] getOperations() {
	return (java.rmi.server.Operation[]) operations.clone();
    }
    
    public void dispatch(java.rmi.Remote obj, java.rmi.server.RemoteCall call, int opnum, long hash)
	throws java.lang.Exception
    {
	if (opnum < 0) {
	    if (hash == 321797395366213756L) {
		opnum = 0;
	    } else if (hash == -4288014995842806239L) {
		opnum = 1;
	    } else if (hash == -2735701587009932691L) {
		opnum = 2;
	    } else if (hash == 7335563984231238833L) {
		opnum = 3;
	    } else if (hash == 3202323540986498357L) {
		opnum = 4;
	    } else if (hash == 5601281247722995301L) {
		opnum = 5;
	    } else if (hash == -2681803097244643466L) {
		opnum = 6;
	    } else if (hash == -4309978758569769243L) {
		opnum = 7;
	    } else if (hash == -2942907285579791263L) {
		opnum = 8;
	    } else if (hash == 7314518805575796051L) {
		opnum = 9;
	    } else if (hash == -797248613395323126L) {
		opnum = 10;
	    } else if (hash == 1588607059140066992L) {
		opnum = 11;
	    } else {
		throw new java.rmi.UnmarshalException("invalid method hash");
	    }
	} else {
	    if (hash != interfaceHash)
		throw new java.rmi.server.SkeletonMismatchException("interface hash mismatch");
	}
	
	org.cougaar.lib.mquo.MetricSCTie server = (org.cougaar.lib.mquo.MetricSCTie) obj;
	switch (opnum) {
	case 0: // booleanValue()
	{
	    call.releaseInputStream();
	    boolean $result = server.booleanValue();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeBoolean($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 1: // charValue()
	{
	    call.releaseInputStream();
	    char $result = server.charValue();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeChar($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 2: // doubleValue()
	{
	    call.releaseInputStream();
	    double $result = server.doubleValue();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeDouble($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 3: // floatValue()
	{
	    call.releaseInputStream();
	    float $result = server.floatValue();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeFloat($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 4: // init(MetricsService)
	{
	    org.cougaar.core.qos.metrics.MetricsService $param_MetricsService_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_MetricsService_1 = (org.cougaar.core.qos.metrics.MetricsService) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.init($param_MetricsService_1);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 5: // isReady()
	{
	    call.releaseInputStream();
	    boolean $result = server.isReady();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeBoolean($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 6: // longValue()
	{
	    call.releaseInputStream();
	    int $result = server.longValue();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeInt($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 7: // longlongValue()
	{
	    call.releaseInputStream();
	    long $result = server.longlongValue();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeLong($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 8: // newPath(String)
	{
	    java.lang.String $param_String_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.newPath($param_String_1);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 9: // octetValue()
	{
	    call.releaseInputStream();
	    byte $result = server.octetValue();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeByte($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 10: // shortValue()
	{
	    call.releaseInputStream();
	    short $result = server.shortValue();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeShort($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 11: // stringValue()
	{
	    call.releaseInputStream();
	    java.lang.String $result = server.stringValue();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	default:
	    throw new java.rmi.UnmarshalException("invalid method number");
	}
    }
}
