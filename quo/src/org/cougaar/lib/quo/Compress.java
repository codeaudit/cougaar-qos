/* -*- JAVA -*- */

// ****** Code generated by the QuO codegenerator 3.0.8 ******
// QuO and the QuO codegenerator have been developed by 
// BBN Technologies.

// Information about QuO is available at:
// http://www.dist-systems.bbn.com/tech/QuO


package org.cougaar.lib.quo;

import com.bbn.quo.rmi.*;
import com.bbn.quo.*;

public class Compress extends com.bbn.quo.rmi.impl.ContractImpl
{
  static ConstantSF constInt500;
  static ConstantSF constBooleantrue;

  static {
    constInt500 = new ConstantSF(new Integer(500));
    constBooleantrue = new ConstantSF(new Boolean(true));
  }


  public void init(SysCond[] scParams, SysCond[][] scSeqParams, Callback[] cbParams, Callback[][] cbSeqParams, Kernel kernel)
  {
  int child_count = 0;

    if (scParams.length != 5 || scSeqParams.length != 0 || cbParams.length != 0 || cbSeqParams.length != 0) {
      throw new RuntimeException("QuO bug: constructor called improperly");
    }

    callback_objs = cbParams;
    callback_seqs = cbSeqParams;
    syscond_objs = new SysCondImpl[5];
    syscond_seqs = new SysCondImpl[0][];


    com.bbn.quo.rmi.impl.SysCond  servant0 = com.bbn.quo.rmi.impl.SysCond.lookup(scParams[0]);
    com.bbn.quo.rmi.impl.SysCond  servant1 = com.bbn.quo.rmi.impl.SysCond.lookup(scParams[1]);
    com.bbn.quo.rmi.impl.SysCond  servant2 = com.bbn.quo.rmi.impl.SysCond.lookup(scParams[2]);
    com.bbn.quo.rmi.impl.SysCond  servant3 = com.bbn.quo.rmi.impl.SysCond.lookup(scParams[3]);
    com.bbn.quo.rmi.impl.SysCond  servant4 = com.bbn.quo.rmi.impl.SysCond.lookup(scParams[4]);

    com.bbn.quo.rmi.DataSCTie tsc0 = (com.bbn.quo.rmi.DataSCTie) servant0;
    com.bbn.quo.data.DataSCImpl expectedServerLoadAverageSC = (com.bbn.quo.data.DataSCImpl) tsc0._delegate();
    syscond_objs[0] = expectedServerLoadAverageSC;
    PrimitiveSF expectedServerLoadAverageSF =
      new PrimitiveSF(expectedServerLoadAverageSC);

    com.bbn.quo.rmi.DataSCTie tsc1 = (com.bbn.quo.rmi.DataSCTie) servant1;
    com.bbn.quo.data.DataSCImpl expectedServerEffectiveMJipsSC = (com.bbn.quo.data.DataSCImpl) tsc1._delegate();
    syscond_objs[1] = expectedServerEffectiveMJipsSC;
    PrimitiveSF expectedServerEffectiveMJipsSF =
      new PrimitiveSF(expectedServerEffectiveMJipsSC);

    com.bbn.quo.rmi.DataSCTie tsc2 = (com.bbn.quo.rmi.DataSCTie) servant2;
    com.bbn.quo.data.DataSCImpl expectedClientEffectiveMJipsSC = (com.bbn.quo.data.DataSCImpl) tsc2._delegate();
    syscond_objs[2] = expectedClientEffectiveMJipsSC;
    PrimitiveSF expectedClientEffectiveMJipsSF =
      new PrimitiveSF(expectedClientEffectiveMJipsSC);

    com.bbn.quo.rmi.DataSCTie tsc3 = (com.bbn.quo.rmi.DataSCTie) servant3;
    com.bbn.quo.data.DataSCImpl expectedNetworkCapacitySC = (com.bbn.quo.data.DataSCImpl) tsc3._delegate();
    syscond_objs[3] = expectedNetworkCapacitySC;
    PrimitiveSF expectedNetworkCapacitySF =
      new PrimitiveSF(expectedNetworkCapacitySC);

    com.bbn.quo.rmi.ValueSCTie tsc4 = (com.bbn.quo.rmi.ValueSCTie) servant4;
    ValueSCImpl UseCompressionSC = (ValueSCImpl) tsc4._delegate();
    syscond_objs[4] = UseCompressionSC;
    PrimitiveSF UseCompressionSF =
      new PrimitiveSF(UseCompressionSC);


    primitives = new PrimitiveSF[5];
    primitives[0] = expectedServerLoadAverageSF;
    primitives[0].sysCond.addObserver(this);
    primitives[1] = expectedServerEffectiveMJipsSF;
    primitives[1].sysCond.addObserver(this);
    primitives[2] = expectedClientEffectiveMJipsSF;
    primitives[2].sysCond.addObserver(this);
    primitives[3] = expectedNetworkCapacitySF;
    primitives[3].sysCond.addObserver(this);
    primitives[4] = UseCompressionSF;
    primitives[4].sysCond.addObserver(this);

    sequences = new SysCondSeqSF[0];

    // pre- and post- method initialization
    probes = new ProbeSCImpl[0];

    // top
    region = new Region("root", null);

    // Regions
    region.children = new Region[2];
    region.children[0] = new Region("Compress", region); // Compress
    region.children[0].idlEnum = 0;
    region.children[0].predicate =
      new DisjPairSF(
        UseCompressionSF, 
        new LessThanSF(expectedNetworkCapacitySF, constInt500));

    // subregions of Compress
    region.children[0].children = null;

    region.children[1] = new Region("Normal", region); // Normal
    region.children[1].idlEnum = 1;
    region.children[1].predicate =
      constBooleantrue;

    // subregions of Normal
    region.children[1].children = null;

    // Region transitions
    // between transitions
    region.between = new Transition[0];

    // fromAny transitions
    region.fromAny = new Transition[0];

    // toAny transitions
    region.toAny = new Transition[0];

    // entering transitions
    region.entering = new Transition[0];

    // leaving transitions
    region.leaving = new Transition[0];

    kernel.addContract(this);
    waitForEval();
  }
}
