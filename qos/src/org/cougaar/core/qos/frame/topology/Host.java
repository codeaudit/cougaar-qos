/*
 * Generated by Cougaar QoS FrameGen
 *   from /Volumes/Data/cougaar/HEAD/qos/src/org/cougaar/core/qos/frame/topology/cougaar-topology-protos.xml
 *   at Aug 1, 2006 3:59:45 PM
 *
 * Copyright BBN Technologies 2006
 *
 */
package org.cougaar.core.qos.frame.topology;

import org.cougaar.core.qos.frame.DataFrame;
import org.cougaar.core.qos.frame.FrameSet;
import org.cougaar.core.qos.frame.SlotDescription;
import org.cougaar.core.qos.metrics.Metric;
import org.cougaar.core.util.UID;

public class Host
    extends Thing {
    static {
        org.cougaar.core.qos.frame.FrameMaker __fm = 
            new org.cougaar.core.qos.frame.FrameMaker() {
                public DataFrame makeFrame(FrameSet frameSet, UID uid) {
                     return new Host(frameSet, uid);
                }
            };
            DataFrame.registerFrameMaker("org.cougaar.core.qos.frame.topology", "host", __fm);
    }
    private transient Metric loadAverage;
    private transient Metric jips;
    private transient Metric effectiveMJips;
    private String status;
    private transient Metric count;


    public Host(UID uid) {
        this(null, uid);
    }


    public Host(FrameSet frameSet,
                UID uid) {
        super(frameSet, uid);
        initializeStatus("unknown");
    }


    public String getKind() {
        return "host";
    }


    protected void collectSlotValues(java.util.Properties __props) {
        super.collectSlotValues(__props);
        Object __value;
        __value = getLoadAverage__AsObject();
        __props.put("loadAverage", __value != null ? __value : NIL);
        __value = getJips__AsObject();
        __props.put("jips", __value != null ? __value : NIL);
        __value = getEffectiveMJips__AsObject();
        __props.put("effectiveMJips", __value != null ? __value : NIL);
        __value = getStatus__AsObject();
        __props.put("status", __value != null ? __value : NIL);
        __value = getCount__AsObject();
        __props.put("count", __value != null ? __value : NIL);
    }


    public Metric getLoadAverage() {
        return loadAverage;
    }


    Metric getLoadAverage__NoWarn() {
        return loadAverage;
    }


    Object getLoadAverage__AsObject() {
        return loadAverage;
    }


    protected void initializeLoadAverage(Metric new_value) {
        this.loadAverage = new_value;
        slotInitialized("loadAverage", new_value);
    }


    void initializeLoadAverage__AsObject(Object new_value) {
        this.loadAverage = force_Metric(new_value);
        slotInitialized("loadAverage", new_value);
    }


    public Metric getJips() {
        return jips;
    }


    Metric getJips__NoWarn() {
        return jips;
    }


    Object getJips__AsObject() {
        return jips;
    }


    protected void initializeJips(Metric new_value) {
        this.jips = new_value;
        slotInitialized("jips", new_value);
    }


    void initializeJips__AsObject(Object new_value) {
        this.jips = force_Metric(new_value);
        slotInitialized("jips", new_value);
    }


    public Metric getEffectiveMJips() {
        return effectiveMJips;
    }


    Metric getEffectiveMJips__NoWarn() {
        return effectiveMJips;
    }


    Object getEffectiveMJips__AsObject() {
        return effectiveMJips;
    }


    protected void initializeEffectiveMJips(Metric new_value) {
        this.effectiveMJips = new_value;
        slotInitialized("effectiveMJips", new_value);
    }


    void initializeEffectiveMJips__AsObject(Object new_value) {
        this.effectiveMJips = force_Metric(new_value);
        slotInitialized("effectiveMJips", new_value);
    }


    public String getStatus() {
        return status;
    }


    String getStatus__NoWarn() {
        return status;
    }


    Object getStatus__AsObject() {
        return status;
    }


    public void setStatus(String __new_value) {
        String __old_value = status;
        this.status = __new_value;
        slotModified("status", __old_value, __new_value, true, true);
    }


    public void setStatus__AsObject(Object __new_value) {
        Object __old_value = getStatus__AsObject();
        this.status = force_String(__new_value);
        slotModified("status", __old_value, __new_value, true, true);
    }


    protected void initializeStatus(String new_value) {
        this.status = new_value;
        slotInitialized("status", new_value);
    }


    void initializeStatus__AsObject(Object new_value) {
        this.status = force_String(new_value);
        slotInitialized("status", new_value);
    }


    public Metric getCount() {
        return count;
    }


    Metric getCount__NoWarn() {
        return count;
    }


    Object getCount__AsObject() {
        return count;
    }


    protected void initializeCount(Metric new_value) {
        this.count = new_value;
        slotInitialized("count", new_value);
    }


    void initializeCount__AsObject(Object new_value) {
        this.count = force_Metric(new_value);
        slotInitialized("count", new_value);
    }
    private static final String loadAverage__SlotVar__ = "loadAverage".intern();
    private static final String jips__SlotVar__ = "jips".intern();
    private static final String effectiveMJips__SlotVar__ = "effectiveMJips".intern();
    private static final String status__SlotVar__ = "status".intern();
    private static final String count__SlotVar__ = "count".intern();


    protected Object getLocalValue(String __slot) {
       String __key = __slot.intern();
       if (loadAverage__SlotVar__ == __key)
            return getLoadAverage__AsObject();
       else if (jips__SlotVar__ == __key)
            return getJips__AsObject();
       else if (effectiveMJips__SlotVar__ == __key)
            return getEffectiveMJips__AsObject();
       else if (status__SlotVar__ == __key)
            return getStatus__AsObject();
       else if (count__SlotVar__ == __key)
            return getCount__AsObject();
       else
           return super.getLocalValue(__slot);
    }


    protected void setLocalValue(String __slot,
                                 Object __value) {
       String __key = __slot.intern();
       if (status__SlotVar__ == __key)
            setStatus__AsObject(__value);
       else
            super.setLocalValue(__slot, __value);
    }


    protected void initializeLocalValue(String __slot,
                                 Object __value) {
       String __key = __slot.intern();
       if (loadAverage__SlotVar__ == __key)
            initializeLoadAverage__AsObject(__value);
       else if (jips__SlotVar__ == __key)
            initializeJips__AsObject(__value);
       else if (effectiveMJips__SlotVar__ == __key)
            initializeEffectiveMJips__AsObject(__value);
       else if (status__SlotVar__ == __key)
            initializeStatus__AsObject(__value);
       else if (count__SlotVar__ == __key)
            initializeCount__AsObject(__value);
       else
            super.initializeLocalValue(__slot, __value);
    }


    protected void postInitialize() {
        super.postInitialize();
        java.util.Observer __observer;
        __observer = new java.util.Observer() {
            public void update(java.util.Observable __xxx, Object __new) {
                Object __old = loadAverage;
                loadAverage = (Metric) __new;
                slotModified("loadAverage", __old, __new, true, true);
            }
        };
        loadAverage = getFrameSet().getMetricValue(this, "Host($(name)):LoadAverage()");
        getFrameSet().subscribeToMetric(this, __observer, "Host($(name)):LoadAverage()");
        __observer = new java.util.Observer() {
            public void update(java.util.Observable __xxx, Object __new) {
                Object __old = jips;
                jips = (Metric) __new;
                slotModified("jips", __old, __new, true, true);
            }
        };
        jips = getFrameSet().getMetricValue(this, "Host($(name)):Jips()");
        getFrameSet().subscribeToMetric(this, __observer, "Host($(name)):Jips()");
        __observer = new java.util.Observer() {
            public void update(java.util.Observable __xxx, Object __new) {
                Object __old = effectiveMJips;
                effectiveMJips = (Metric) __new;
                slotModified("effectiveMJips", __old, __new, true, true);
            }
        };
        effectiveMJips = getFrameSet().getMetricValue(this, "Host($(name)):EffectiveMJips()");
        getFrameSet().subscribeToMetric(this, __observer, "Host($(name)):EffectiveMJips()");
        __observer = new java.util.Observer() {
            public void update(java.util.Observable __xxx, Object __new) {
                Object __old = count;
                count = (Metric) __new;
                slotModified("count", __old, __new, true, true);
            }
        };
        count = getFrameSet().getMetricValue(this, "Host($(name)):Count()");
        getFrameSet().subscribeToMetric(this, __observer, "Host($(name)):Count()");
    }


    protected void collectSlotNames(java.util.Set<String> slots) {
        super.collectSlotNames(slots);
        slots.add("loadAverage");
        slots.add("jips");
        slots.add("effectiveMJips");
        slots.add("status");
        slots.add("count");
    }


    public SlotDescription slotMetaData__LoadAverage() {
        SlotDescription __desc = new SlotDescription();
        __desc.name = "loadAverage";
        __desc.prototype = "host";
        __desc.is_writable = false;
        Object __value;
        __value = loadAverage;
        if (__value != null) {
            __desc.is_overridden = true;
            __desc.value = __value;
        } else {
            __desc.is_overridden = false;
        }
        return __desc;
    }


    public SlotDescription slotMetaData__Jips() {
        SlotDescription __desc = new SlotDescription();
        __desc.name = "jips";
        __desc.prototype = "host";
        __desc.is_writable = false;
        Object __value;
        __value = jips;
        if (__value != null) {
            __desc.is_overridden = true;
            __desc.value = __value;
        } else {
            __desc.is_overridden = false;
        }
        return __desc;
    }


    public SlotDescription slotMetaData__EffectiveMJips() {
        SlotDescription __desc = new SlotDescription();
        __desc.name = "effectiveMJips";
        __desc.prototype = "host";
        __desc.is_writable = false;
        Object __value;
        __value = effectiveMJips;
        if (__value != null) {
            __desc.is_overridden = true;
            __desc.value = __value;
        } else {
            __desc.is_overridden = false;
        }
        return __desc;
    }


    public SlotDescription slotMetaData__Status() {
        SlotDescription __desc = new SlotDescription();
        __desc.name = "status";
        __desc.prototype = "host";
        __desc.is_writable = true;
        Object __value;
        __value = status;
        if (__value != null) {
            __desc.is_overridden = true;
            __desc.value = __value;
        } else {
            __desc.is_overridden = false;
            __desc.value = "unknown";
        }
        return __desc;
    }


    public SlotDescription slotMetaData__Count() {
        SlotDescription __desc = new SlotDescription();
        __desc.name = "count";
        __desc.prototype = "host";
        __desc.is_writable = false;
        Object __value;
        __value = count;
        if (__value != null) {
            __desc.is_overridden = true;
            __desc.value = __value;
        } else {
            __desc.is_overridden = false;
        }
        return __desc;
    }


    protected void collectSlotDescriptions(java.util.Map<String,SlotDescription> map) {
        super.collectSlotDescriptions(map);
        map.put("loadAverage", slotMetaData__LoadAverage());
        map.put("jips", slotMetaData__Jips());
        map.put("effectiveMJips", slotMetaData__EffectiveMJips());
        map.put("status", slotMetaData__Status());
        map.put("count", slotMetaData__Count());
    }
}
