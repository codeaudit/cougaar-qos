package org.cougaar.core.qos.profile;

import java.lang.reflect.*;
import java.io.*;
import java.text.*;
import java.util.*;
import java.util.regex.*;
import org.cougaar.core.agent.*;
import org.cougaar.core.component.*;
import org.cougaar.core.mts.*;
import org.cougaar.core.node.*;
import org.cougaar.core.qos.metrics.*;
import org.cougaar.core.service.*;
import org.cougaar.core.service.wp.*;
import org.cougaar.core.thread.*;
import org.cougaar.core.wp.resolver.*;
import org.cougaar.util.*;

/**
 * This component profiles the {@link MetricsService}'s
 * summary resource metrics (load average, tcp use, etc).
 * <p> 
 * This is the same output as the "/metrics/resources" servlet
 * generated by {@link org.cougaar.core.qos.metrics.NodeResourcesServlet}.
 * <p>
 * Example output:<pre> 
 *   resources - #EffectiveMJips, LoadAverage, Count, Jips, BogoMips,
 *     Cache, TcpInUse, UdpInUse, TotalMemory, FreeMemory,
 *     MeanTimeBetweenFailure,
 *   resources - 1947, 2.67, 1, 1947156330, 5570,
 *     512, 37, 8, 2064548, 121492,
 *     8760,
 * </pre>
 *
 * @see ProfilerCoordinator required coordinator component
 */ 
public class Resources extends ProfilerBase {
  private static final DecimalFormat FORMAT_DECIMAL = new DecimalFormat("#0.00");
  private static final String[] FIELDS = new String[] {
    "EffectiveMJips",
    "LoadAverage",
    "Count",
    "Jips",
    "BogoMips",
    "Cache",
    "TcpInUse",
    "UdpInUse",
    "TotalMemory",
    "FreeMemory",
    "MeanTimeBetweenFailure",
  };
  private static final String HEADER = toHeader(FIELDS);

  private MetricsService ms;
  private MessageAddress nodeId;
  public void load() {
    super.load();
    ms = (MetricsService)
      sb.getService(this, MetricsService.class, null);
    NodeIdentificationService nis = (NodeIdentificationService)
      sb.getService(this, NodeIdentificationService.class, null);
    nodeId = nis.getMessageAddress();
    sb.releaseService(this, NodeIdentificationService.class, nis);
  }
  public void run() {
    log("org.cougaar.core.qos.profile.resources",
        HEADER, getResources());
  }
  private String getResources() {
    StringBuffer buf = new StringBuffer();
    for (int i = 0; i < FIELDS.length; i++) {
      buf.append(getMetric(FIELDS[i])).append(", ");
    }
    return buf.toString();
  }

  private String getMetric(String name) {
    Metric metric = ms.getValue("Agent("+nodeId+"):"+name);
    if (metric == null) {
      return "-1";
    }
    if (name.equals("LoadAverage")) {
      return FORMAT_DECIMAL.format(metric.doubleValue());
    }
    return Integer.toString((int) metric.doubleValue());
  }
}
