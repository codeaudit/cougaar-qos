##############
# Five Ping society generator
# Src1 -> Sink1
# Src2 -> Sink2
# Src3 -> Sink3
# Src4 -> Sink4
# Src4 -> Sink5
# All on a single Node1 and Host1

def addPing(source, dest, args)
  srcAgent = society.agents[source]
  if !srcAgent
    srcAgent = society.nodes['NODE1'].add_agent(source)
  end
  destAgent = society.agents[dest]
  if !destAgent
    destAgent = society.nodes['NODE1'].add_agent(dest)
  end

  srcAgent.add_component("org.cougaar.ping.PingAdderPlugin") do |c|
    c.classname = "org.cougaar.ping.PingAdderPlugin"
    c.add_argument("target=#{dest}")
    args.each_pair {|key, value|
      c.add_argument("#{key}=#{value}")
    }
  end
end 

def managePings(wake_time)
  society.each_agent do |agent|
    if agent.has_component?("org.cougaar.ping.PingAdderPlugin")
      unless agent.has_component?("org.cougaar.ping.PingTimerPlugin")
	c = agent.add_component("org.cougaar.ping.PingTimerPlugin")
	c.classname = "org.cougaar.ping.PingTimerPlugin"
	c.add_argument("#{wake_time}")
      end
    end
  end
end

def addDefaultPing(number)
    # send ping from Agent1 to Agent2
    # eventMillis is interval beteen statistics events being logged
  addPing("Source#{number}", "Sink#{number}", 
	  {'eventMillis' => '100000',
	    'delayMillis' => '5000',
	    'ignoreRollback' => 'true',
	    # Define Ping Size in bytes, 
	    #'sendFillerSize' => '50000',
	    # false means extra bytes will be compressable 
	    #'sendFillerRand' => 'false',
	    #'echoFillerSize' => '50000',
	    #'echoFillerRand' => 'false',
	  })
end

society.add_host('HOST1') do |host|
  host.add_node('NODE1') do |node|
    addDefaultPing(1)
    addDefaultPing(2)
    addDefaultPing(3)
    addDefaultPing(4)
    addDefaultPing(5)
  end

  # add ping managers to all agents that send pings
  #
  # wake once every second to check ping timeouts
  managePings(1000)
end
