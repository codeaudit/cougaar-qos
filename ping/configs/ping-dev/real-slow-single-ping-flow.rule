##############
# Single Ping society generator
# Agent1 -> Agent2
# All on a single Node1 and Host1

def addPing(source, dest, args)
  srcAgent = society.agents[source]
  if !srcAgent
    srcAgent = society.nodes['NODE1'].add_agent(source)
  end
  destAgent = society.agents[dest]
  if !destAgent
    destAgent = society.nodes['NODE1'].add_agent(dest)
  end

  srcAgent.add_component("org.cougaar.ping.PingAdderPlugin") do |c|
    c.classname = "org.cougaar.ping.PingAdderPlugin"
    c.add_argument("target=#{dest}")
    args.each_pair {|key, value|
      c.add_argument("#{key}=#{value}")
    }
  end
end 

def managePings(wake_time)
  society.each_agent do |agent|
    if agent.has_component?("org.cougaar.ping.PingAdderPlugin")
      unless agent.has_component?("org.cougaar.ping.PingTimerPlugin")
	c = agent.add_component("org.cougaar.ping.PingTimerPlugin")
	c.classname = "org.cougaar.ping.PingTimerPlugin"
	c.add_argument("#{wake_time}")
      end
    end
  end
end

society.add_host('HOST1') do |host|
  host.add_node('NODE1') do |node|
    # send ping from Source1 to Sink1
    # eventMillis is interval beteen statistics events being logged
    addPing('Source1', 'Sink1', 
            {'eventMillis' => '10000',
	      'delayMillis' => '9000',
	      #'sendFillerSize' => '50000',
	      #'sendFillerRand' => 'false',
	      #'echoFillerSize' => '50000',
	      #'echoFillerRand' => 'false',
	    })

    # add more "addPing" calls here
  end

  # add ping managers to all agents that send pings
  #
  # wake once every second to check ping timeouts
  managePings(1000)
end
